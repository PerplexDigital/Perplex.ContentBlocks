@using Umbraco.Extensions
@using Umbraco.Forms.Web.Services

@model Umbraco.Forms.Web.Models.FormViewModel

@inject IFormThemeResolver FormThemeResolver

@using Umbraco.Forms.Web

@*
    This view is used as the default render view for all forms, unless a theme
    is chosen, which contains a override of render.cshtm
    Normally, you would not need to override this view, as you would have to
    replicate all functionality of this view seperately
*@

@{
    //Get the actual view to render the form html
    var formThemedView = FormThemeResolver.GetFormView(Model);

    //get the script.cshtml view to render client-side assets
    var formScriptView = FormThemeResolver.GetScriptView(Model);

}

@* In case the form has been marked as submitted - the FormThemeResolver will return the submitted.cshtml file and look for a custom
   view. In case there is no view found - it will default to /themes/default/submitted which will just display the standard message
*@
@if (Model.SubmitHandled)
{
    @await Html.PartialAsync(formThemedView);

} else {

    @*Standard form and wrapper *@
    <div id="umbraco_form_@Model.FormClientId" class="umbraco-forms-form @Model.CssClass umbraco-forms-@Model.Theme">

        @using (Html.BeginUmbracoForm<Umbraco.Forms.Web.Controllers.UmbracoFormsController>("HandleForm", null, Model.HtmlAttributes ))
        {
            @* Standard form meta data *@

            @Html.HiddenFor(x => Model.FormId, new {id = (string)null})
            @Html.HiddenFor(x => Model.FormName, new {id = (string)null})
            @Html.HiddenFor(x => Model.RecordId, new {id = (string)null})
            @Html.HiddenFor(x => Model.PreviousClicked, new {id = (string)null})
            @Html.HiddenFor(x => Model.Theme, new {id = (string)null})

            @* These 2 cannot use the htmlhelper *@
            <input type="hidden" name="FormStep" value="@Model.FormStep" />
            <input type="hidden" name="RecordState" value="@Model.RecordState" />

            @* Render the form html *@
            @await Html.PartialAsync(formThemedView)
        }


        @* Form Scripts *@
        @if (Model.RenderScriptFiles)
        {
            @* Render the scripts.cshtml file to included standard conditionals and validation logic *@
            await Html.RenderPartialAsync(formScriptView);
        }
    </div>
}
