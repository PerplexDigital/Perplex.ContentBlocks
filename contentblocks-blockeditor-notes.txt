+-------------------+
| BackOffice editor |
+-------------------+

Voor het renderen en editen van blokken en de properties van de blokken in de BackOffice maken we nu onderwater gebruik van NestedContent.
Er is nu een PoC gemaakt om dit aan te passen naar de BlockEditor van Umbraco.
Dit werkt goed, blokken kunnen worden aangemaakt en de properties kunnen worden aangepast.
Na een Save/Publish worden de blokken weer goed ingeladen.
We hebben volledige controle over de UI die we om een blok heen willen zetten, net zoals bij NestedContent.
In de PoC is de ContentBlocks UI er nog niet omheen gezet, maar omdat we elke individueel blok kunnen renderen op de plek waar we willen zal dit geen problemen opleveren.

+---------------------------+
| Migrereren property value |
+---------------------------+

Voor het behouden van content in alle bestaande sites die ContentBlocks gebruiken zullen we de data moeten migrereren van het NestedContent formaat naar het BlockEditor formaat.
Het formaat verschilt gelukkig niet heel veel. De structuur is enigszins aangepast maar de content data zelf is eigenlijk hetzelfde.
Zie hieronder een vergelijking.
Er zitten wat meer verschillen in de structuur eromheen die hieronder niet te zien is, maar in de kern gaat het om deze 2 objecten die we moeten omzetten:

NestedContent
{
    "key": "5f78d877-258d-45a6-bb0c-4e1adeb42b81",
    "name": "Test",
    "ncContentTypeAlias": "exampleBlock",
    "title": "Test",
    "text": "<p><strong>Test</strong></p>\n<p><a href=\"/{localLink:umb://document/ce72d00f878a4e20b026b26ed9a136fb}\" title=\"Home\">Link</a></p>"
}


BlockEditor
{
    "contentTypeKey": "7a84d7fc-dcf7-466c-b52e-bc59b237949e",
    "udi": "umb://element/887f372b8b914b9b838ea50aeefe2708",
    "title": "Test",
    "text": "<p><strong>Test</strong></p>\n<p><a href=\"/{localLink:umb://document/ce72d00f878a4e20b026b26ed9a136fb}\" title=\"Home\">Link</a></p>"
}

Je ziet dus dat er vrij weinig verschillen zijn. NestedContent gebruikt doctype alias (ncContentTypeAlias), BlockEditor gebruikt doctype key (contentTypeKey), maar dat is makkelijk om te zetten.
Verder heeft NestedContent een unieke GUID (key), terwijl BlockEditor een udi gebruikt maar dat is letterlijk ook een GUID met prefix "umb://element/" dus is ook 1 op 1 om te zetten.
De inhoud van de content properties zelf ("title" en "text" in dit voorbeeld) is exact gelijk dus daar hoeven we niets aan te doen.

Een limitatie waar we tegen aan liepen is dat de Block Editor geen doctypes support waarin NestedContent properties zitten.
Indien er dus bestaande doctypes zijn die gebruikt worden in ContentBlocks met daarin NestedContent datatypes dan zullen we de NestedContent datatypes moeten omzetten naar Umbraco.BlockListEditor datatypes die we vervolgens wel in de BlockEditor kunnen gebruiken.

+---------------------+
| Front end rendering |
+---------------------+

Voor het renderen in de front-end is het doel dat dit exact hetzelfde blijft als nu voor de eindgebruiker.
In ContentBlocks gebruikten we altijd al de ModelsBuilder classes, en ook de BlockEditor zou dit moeten ondersteunen.
We moeten wel een aanpassing maken in onze PropertyValueConverter die de property value omzet naar ModelsBuilder objecten maar dit zou op een soortgelijke manier moeten kunnen als dat we nu doen,
behalve dat we dus gebruik zullen moeten maken van een BlockEditor C# service in plaats van de huidige NestedContentSingleValueConverter.

